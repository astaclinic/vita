name: "Terraform Dev"

on:
  workflow_dispatch:
    inputs:
      intent:
        description: "Subcommand to run Terraform with"
        required: true
        type: choice
        options:
          - destroy
          - apply

permissions:
  id-token: write
  contents: read
  pull-requests: write
  packages: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: dev-db
    env:
      AWS_REGION: ap-southeast-1
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::627212684605:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/${{ github.repository_owner }}/providers/github"
          service_account: "terraform@${{ github.repository_owner }}.iam.gserviceaccount.com"
          audience: "https://github.com/${{ github.repository_owner }}"
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        env:
          TF_VAR_registry_username: ${{ github.actor }}
          TF_VAR_registry_password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' &&  inputs.intent == 'apply'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_registry_username: ${{ github.actor }}
          TF_VAR_registry_password: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Destroy
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' &&  inputs.intent == 'destroy'
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_registry_username: ${{ github.actor }}
          TF_VAR_registry_password: ${{ secrets.GITHUB_TOKEN }}
